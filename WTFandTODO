_________________________________WTF?!____________________________________
The main goal of this project is creation of embeddable version of DosBox,
which may relatively easily run on something really low-cost. Like STM32
microcontrollers.
So the first thing needed to be done is truncation of source code tree.
The vanilla dosbox compiled on $(see gcc.ver) weights 10.8 MB*
Current version (on the same machine with the same toolchain) weights 9.0 MB*
and still counting down.
This is a fun weekend project, so don't expect anything really usable :)
But if you want to run your beloved DOOM** or even a full Win95 install on a 
homebrew USB-stick-sized cardboard PC (which will cost you around $15) -- feel
free to contribute and share the fun!
*-----
	Unstripped versions. DosCard XShell have SDL2 linked statically, so the 
	real size is much lower (~4 MB less).
**----
	Yes, I know about over 9000 implementations of DOOM or Quake engines, but
	it's not what I want to see. Porting a full DOS makes it possible to run
	heavy old programs (not only a games) without a pain of porting.


_________________________________TODO________________________________________


1. Truncate the code tree to exclude everything unneeded
	Scalers: this thing is really useful but render_scalers.o only weights > 3MB
	and so that's a real problem! In our setup we will scale image down to fit
	the small cheap 320x240 TFT display instead of enhancing quality to show on
	full-wall-sized plasma TV.
	Debug: debugger usability in embedded systems is a hard question. Moreover,
	internal DosBox debugger makes it not possible to run some DPMI apps.
	For example, Win95 crashes after showing a desktop. The solution for now
	is to leave the code on place, but undef all C_DEBUG defines.
	Hardware: I don't need GUS, EGA, CGA and many other things. The only things
	I need is SVGA (s3) and SoundBlaster (which uses OPL, btw).
->ALMOST DONE!

2. Decide what to do with SDL.
	Pros: SDL has well-maintained code and it's really simple to write your
	own hardware driver and put it to the tree.
	Cons: SDL has weight. There's not so much things to do with this fact.
	SDL needs threads. I can't see any way to make SDL audio works without
	threading enabled. Next, DosBox uses pretty old SDL 1.2, with all of this 
	'surfaces' and other old stuff. So it would be useless to port OLD SDL to a 
	custom platform because a lifeline of 1.2 is near it's end.
	Conclusion: Wipe out SDL code and make my own wrapper to easily move between
	debugging on a Core-i7 based gametop PC to running on a STM32 cardboard :)
	Moreover, the new SDL 2.0 brings the new capability of running scaling code
	directly on your nVidia TITAN GPU !!! So the render_scalers can be wiped out
	next to old SDL, eehaw!
-> DONE!

	
3. Refactor code. It's highly improbable that we will want to merge something
from upstream DosBox due to fact of everything we want is already working.
I had decided that will be a lib, libdosbox. There will be two versions of this:
(a) x86 GNU/Linux static or/and shared lib; and (b) embeddable library to just
include in your hobby microcontroller project. Nice, isn't it?
->IN PROGRESS
Notes: Coding style is not the best I've ever seen. To be honest, it's worstest
style I've ever seen. Classes scattering around without any real purpose. Huge
amount of globals everywhere. Almost none of the core classes can be instantiated
more than once. Really obfuscated function calls, amount of function pointers in
trivial places, etc, etc.


4. Select a chip to port this thing into and draw the schematics (and PCB
layers of course)

5. Write the ld script for a chip selected (arm/chip/load.ld)
6. Write our own crt0 replace for this chip (arm/chip/start.S)

7. Made something with CDROM_ImageFile AudioFile - Using SDL_sound is just unreal.

8. Cut and replace all filesystem IO code with XShell Callbacks - in real chip
we obviously won't have a "normal" disk filesystem.
List of functions remains to be moved (not FIO only):
stat()/fstat() -> OK
time()/localtime()

-> ALMOST DONE


9. Move all of the libdosbox code into it's own namespace.
-> DONE!

10. Check and clean up all the files in INCLUDE directory!
-> DONE!

11. Do something with VM' internal clocks. One of the hardest bugs is the clocking
errors. For example, W95 will not load properly in hi-res mode without -O2 flag.
Which means, the richness of functionality of guest OS lies on host system 
performance. That's bad!
UPD: I think that isn't an issue. The problem relevant to timing, but in some other
way. Deep investigation needed!
HINT: heavy use of GCC attributes in original code can make GCC crazy.
->IN PROGRESS

12. Types unification. Use <inttypes> instead of all of this Bit<xx>[s/u] forms.
-> PARTIALLY DONE

13. Deal with manual exceptions and its catches. This might unveil big problems while
porting on possible target arch.

14. Get rid of static qualifiers. Make sure there's no static methods or members.

15. Run a set of statical analysis processes to seek and eliminate violations,
unused code, creepy pointer arithmetic and so on.
->IN PROGRESS
Note: Understand 3.1 had found >19000 violations on a smallest ruleset. More complex
rulesets may unveil much more violations and potential problems. The number was
lowered to 3973 after unchecking some unimportant checks. About 3-5% of this number
is really potential problems.

16. Get rid of HOST_xxBIT define. Use some standard type, which will have properly
width on all platforms.

